A Binary Search Tree (BST) is a data structure that organizes elements (usually numbers or keys) in a hierarchical manner for efficient searching, insertion, and deletion. It has the following properties:

Properties of a BST:

1. Node structure: Each node contains three components:

A key or value.

A pointer/reference to the left child.

A pointer/reference to the right child.



2. Ordering:

For any node:

The values in its left subtree are less than the node's value.

The values in its right subtree are greater than the node's value.




3. No duplicates: Typically, duplicate values are not allowed in a BST (though some variations allow them).




---

Operations on a BST:

1. Search:

Start at the root.

If the key matches the current node, return it.

If the key is smaller, move to the left subtree; if larger, move to the right.

Time complexity:

Best case: O(1) (key at root)

Average case: O(log n) (balanced tree)

Worst case: O(n) (skewed tree).




2. Insertion:

Follow the search path to find the correct position.

Add the new value as a leaf.

Time complexity: Same as search.



3. Deletion:

Three cases to handle:

1. Leaf node: Remove it directly.


2. Node with one child: Replace the node with its child.


3. Node with two children: Replace the node with its in-order successor or in-order predecessor and recursively delete the replacement node.



Time complexity: Same as search.



4. Traversal:

Visit all nodes in a specific order:

1. In-order (LNR): Left, Node, Right → Yields sorted order.


2. Pre-order (NLR): Node, Left, Right → Useful for creating a copy of the tree.


3. **Post-order






